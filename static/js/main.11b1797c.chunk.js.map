{"version":3,"sources":["components/Tabs.js","components/Dropdowns.js","components/Chart.js","containers/ChartData.js","components/Buttons.js","App.js","serviceWorker.js","index.js"],"names":["Tabs","react_default","a","createElement","Container","fluid","style","padding","Button","basic","color","disabled","borderRadius","width","marginRight","active","props","Grid","columns","padded","Row","Column","Header","size","className","Dropdown","selection","options","text","value","defaultValue","multiple","key","onChange","Chart","lines","selected","forEach","sensor","push","es6","type","dataKey","stroke","console","log","data","height","tickLine","domain","ticks","unit","axisLine","strokeDasharray","align","verticalAlign","layout","iconType","ChartData","state","time","i","CH01 SE01","Math","random","toFixed","CH01 SE14","CH03 SE01","this","setState","components_Chart","React","Component","floated","Icon","name","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleChange","e","bind","assertThisInitialized","Menu","borderless","Item","header","components_Tabs","Dropdowns","Divider","ChartData_ChartData","Buttons","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.11b1797c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Container, Button } from \"semantic-ui-react\";\r\n\r\nconst Tabs = () => (\r\n  <div>\r\n    <Container fluid style={{ padding: \"0px\" }}>\r\n      <Button\r\n        basic\r\n        color=\"blue\"\r\n        disabled\r\n        style={{\r\n          borderRadius: \"20px\",\r\n          width: \"135px\",\r\n          marginRight: \"25px\"\r\n        }}\r\n      >\r\n        Real-time\r\n      </Button>\r\n      <Button\r\n        basic\r\n        color=\"yellow\"\r\n        disabled\r\n        style={{\r\n          borderRadius: \"20px\",\r\n          width: \"135px\",\r\n          marginRight: \"25px\"\r\n        }}\r\n      >\r\n        Snapshot\r\n      </Button>\r\n      <Button\r\n        color=\"red\"\r\n        active\r\n        style={{ borderRadius: \"20px\", width: \"135px\" }}\r\n      >\r\n        Historical\r\n      </Button>\r\n    </Container>\r\n  </div>\r\n);\r\n\r\nexport default Tabs;\r\n","import React from \"react\";\r\nimport { Header, Grid, Dropdown } from \"semantic-ui-react\";\r\n\r\nconst Tabs = props => {\r\n  return (\r\n    <div>\r\n      <Grid columns={4} padded>\r\n        <Grid.Row padded>\r\n          <Grid.Column>\r\n            <Header size=\"small\" className=\"font-wrapper\">\r\n              <div className=\"font-wrapper\">Sensor Type</div>\r\n            </Header>\r\n            <Dropdown\r\n              fluid\r\n              selection\r\n              options={[{ text: \"Humidity\", value: \"Humidity\" }]}\r\n              defaultValue={\"Humidity\"}\r\n            />\r\n          </Grid.Column>\r\n          <Grid.Column>\r\n            <Header size=\"small\">\r\n              <div className=\"font-wrapper\">Sensors</div>\r\n            </Header>\r\n            <Dropdown\r\n              fluid\r\n              multiple\r\n              selection\r\n              options={[\r\n                { key: \"1\", text: \"CH01 SE01\", value: \"CH01 SE01\" },\r\n                { key: \"2\", text: \"CH01 SE14\", value: \"CH01 SE14\" },\r\n                { key: \"3\", text: \"CH03 SE01\", value: \"CH03 SE01\" }\r\n              ]}\r\n              //state from Apps.js is updated for each sensor selected/removed\r\n              onChange={props.onChange}\r\n            />\r\n          </Grid.Column>\r\n          <Grid.Column>\r\n            <Header size=\"small\">\r\n              <div className=\"font-wrapper\">Data Granularity</div>\r\n            </Header>\r\n            <Dropdown\r\n              fluid\r\n              selection\r\n              options={[{ text: \"5 Min\", value: \"5 Min\" }]}\r\n              defaultValue={\"5 Min\"}\r\n            />\r\n          </Grid.Column>\r\n          <Grid.Column>\r\n            <Header size=\"small\">\r\n              <div className=\"font-wrapper\">Time Range</div>\r\n            </Header>\r\n            <Dropdown\r\n              fluid\r\n              selection\r\n              options={[{ text: \"Past 1 Day\", value: \"Past 1 Day\" }]}\r\n              defaultValue={\"Past 1 Day\"}\r\n            />\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Tabs;\r\n","import React from \"react\";\r\nimport {\r\n  LineChart,\r\n  Line,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  ResponsiveContainer,\r\n  Legend\r\n} from \"recharts\";\r\n\r\nconst Chart = props => {\r\n  //Pushes a new recharts Line in an array of JSX elements for each sensor selected\r\n  const lines = [];\r\n  props.selected.forEach(sensor => {\r\n    lines.push(\r\n      <Line\r\n        key={sensor}\r\n        type=\"monotone\"\r\n        dataKey={sensor}\r\n        stroke={\r\n          sensor === \"CH01 SE01\"\r\n            ? \"#FF5151\"\r\n            : sensor === \"CH01 SE14\"\r\n            ? \"#98FF98\"\r\n            : sensor === \"CH03 SE01\"\r\n            ? \"#6FD3FF\"\r\n            : \"\"\r\n        }\r\n      />\r\n    );\r\n  });\r\n  console.log(props.data);\r\n  return (\r\n    <div>\r\n      <ResponsiveContainer height={400}>\r\n        <LineChart data={props.data}>\r\n          <XAxis dataKey=\"time\" stroke=\"grey\" tickLine={false} />\r\n          <YAxis\r\n            domain={[-50, 200]}\r\n            ticks={[-50, 0, 50, 100, 150, 200]}\r\n            unit={\"\\u00b0C\"}\r\n            axisLine={false}\r\n            tickLine={false}\r\n          />\r\n          />\r\n          <CartesianGrid stroke=\"grey\" strokeDasharray=\"3 3\" />\r\n          <Tooltip />\r\n          <Legend\r\n            align=\"left\"\r\n            verticalAlign=\"middle\"\r\n            layout=\"vertical\"\r\n            height={36}\r\n            iconType=\"circle\"\r\n          />\r\n          {lines}\r\n        </LineChart>\r\n      </ResponsiveContainer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chart;\r\n","import React from \"react\";\r\nimport Chart from \"../components/Chart\";\r\n\r\nexport default class ChartData extends React.Component {\r\n  state = { data: [] };\r\n  //generate random temps only once when the component is first mounted\r\n  componentDidMount() {\r\n    let data = [];\r\n    let time;\r\n    //Random temperature generator from 18:10 to 18:16\r\n    for (let i = 0; i <= 6; i++) {\r\n      time = \"18:1\" + i;\r\n      data.push({\r\n        time,\r\n        \"CH01 SE01\": (Math.random() * (200 - -50) - 50).toFixed(2),\r\n        \"CH01 SE14\": (Math.random() * (200 - -50) - 50).toFixed(2),\r\n        \"CH03 SE01\": (Math.random() * (200 - -50) - 50).toFixed(2)\r\n      });\r\n    }\r\n    this.setState({ data });\r\n  }\r\n  render() {\r\n    //pass down selected props from Apps.js and Dropdown.js\r\n    return <Chart data={this.state.data} selected={this.props.selected} />;\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { Container, Button, Icon } from \"semantic-ui-react\";\r\n\r\nconst Tabs = () => (\r\n  <div>\r\n    <Container fluid style={{ padding: \"0px\" }}>\r\n      <Button\r\n        color=\"blue\"\r\n        active\r\n        floated=\"right\"\r\n        style={{\r\n          width: \"300px\",\r\n          marginRight: \"25px\"\r\n        }}\r\n      >\r\n        <Icon name=\"download\" /> Download\r\n      </Button>\r\n      <Button\r\n        active\r\n        floated=\"right\"\r\n        style={{\r\n          width: \"300px\",\r\n          marginRight: \"25px\"\r\n        }}\r\n      >\r\n        CSV\r\n      </Button>\r\n    </Container>\r\n  </div>\r\n);\r\n\r\nexport default Tabs;\r\n","import React from \"react\";\nimport Tabs from \"./components/Tabs\";\nimport Dropdowns from \"./components/Dropdowns\";\nimport ChartData from \"./containers/ChartData\";\nimport Footer from \"./components/Buttons\";\nimport \"./App.css\";\nimport { Menu, Container, Divider } from \"semantic-ui-react\";\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selected: []\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n  //Every time a new sensor is selected/removed, set the state of selected sensors and render\n  handleChange = (e, data) => {\n    this.setState({ selected: data.value });\n  };\n\n  render() {\n    const { selected } = this.state;\n    return (\n      <div className=\"font-wrapper\">\n        <Menu borderless size=\"huge\">\n          <Menu.Item header>Measurement</Menu.Item>\n        </Menu>\n        <Container fluid>\n          <Tabs />\n          <br />\n          <Dropdowns onChange={this.handleChange} />\n          <Divider />\n          <br />\n          <ChartData selected={selected} />\n        </Container>\n        <Footer />\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}